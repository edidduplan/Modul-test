elec_volume_profit$volume <- as.integer(elec_volume_profit$volume)
elec_volume_profit$bw_price <- as.numeric(elec_volume_profit$bw_price)
elec_volume_profit$bw_profitmargin <-
as.numeric(elec_volume_profit$bw_profitmargin)
elec_volume_profit$profit <- as.numeric(elec_volume_profit$profit)
elec_volume_profit$profit <- elec_volume_profit$volume *
elec_volume_profit$bw_price * elec_volume_profit$bw_profitmargin
ggplot(elec_volume_profit, aes(x = product_type, y = profit, fill = product_type)) +
geom_bar(stat = "identity") +
ggtitle("Elec's products (whole portfolio) - Profit")
# Getting meadian for price and profit margin in BW's data
bw_price <- boxplot(existingprod$Price ~ existingprod$ProductType, plot = F)$stats[3,]
bw_profitmargin <- boxplot(existingprod$ProfitMargin ~ existingprod$ProductType, plot = F)$stats[3,]
bw_product_type <- cbind(levels(blackwell_prod$ProductType), bw_price, bw_profitmargin)
colnames(bw_product_type)[1] <- "product_type"
bw_product_type <- as.data.frame(bw_product_type)
# Creating a data frame to merge Elec?s data with estimated price and profit margin
elec_volume_profit <- merge(elec_volume, bw_product_type, by = "product_type")
elec_volume_profit$volume <- as.integer(elec_volume_profit$volume)
elec_volume_profit$bw_price <- as.numeric(elec_volume_profit$bw_price)
elec_volume_profit$bw_profitmargin <-
as.numeric(elec_volume_profit$bw_profitmargin)
elec_volume_profit$profit <- as.numeric(elec_volume_profit$profit)
dist_trans <- sort(size(ElectronidexTrans2017), decreasing = F )
dist_trans <- as.data.frame(dist_trans)
ggplot(dist_trans, aes(x= dist_trans)) + geom_histogram(binwidth = 1,
color = "white")
View(dist_trans)
colnames(dist_trans) <- c("transaction_size")
ggplot(dist_trans, aes(x= dist_trans)) + geom_histogram(binwidth = 1,
color = "white")
dist_trans <- sort(size(ElectronidexTrans2017), decreasing = F )
dist_trans <- as.data.frame(dist_trans)
colnames(dist_trans) <- c("transaction_size")
ggplot(dist_trans, aes(x= dist_trans)) + geom_histogram(binwidth = 1,
color = "white")
ggplot(dist_trans, aes(x= dist_trans)) + geom_histogram(binwidth = 2,
color = "white")
size(ElectronidexTrans2017)
ggplot(dist_trans, aes(x= transaction_size)) + geom_histogram(binwidth = 2,
color = "white")
ggplot(dist_trans, aes(x = transaction_size)) +
geom_histogram(binwidth = 1, color = "white")
ggplot(dist_trans, aes(x = transaction_size)) +
geom_histogram(binwidth = 1, color = "white") +
ggtitle("Distribution of the transaction's size at Elec")
View(ProductType_key)
ElectronidexTrans2017@itemInfo$ProductType <- ProductType_key$BlackWell
Desktop <- ElectronidexTrans2017@itemInfo[which(ProductType_key$BlackWell ==
"Desktop"), 1]
Desktop <- ElectronidexTrans2017@itemInfo[which(ProductType_key$BlackWell ==
"Desktop"), 1]
ind <- c()
counter <- 0
for (i in 1:9){
for (j in (1:9)[-i]){
for (k in (1:9)[-c(i,j)]){
ind <- c(ind, which(ElectronidexTrans2017 %in% Desktop[i] &
ElectronidexTrans2017 %in% Desktop[j] &
ElectronidexTrans2017 %in% Desktop[k]))
counter <- counter + 1
}
}
}
print(counter)
size(ElectronidexTrans2017) > 5
str(size(ElectronidexTrans2017) > 5)
# Finding the indices of transactions higher thatn 4 items
ind2 <- size(ElectronidexTrans2017) > 4
# Consolidating the indices
ind3 <- c(ind, ind2)
# Finding the indices of transactions higher thatn 4 items
ind2 <- which(size(ElectronidexTrans2017) > 4)
# Consolidating the indices
ind3 <- c(ind, ind2)
uniq_ind <- unique(ind)
ElectronidexTrans2017_B2B <- ElectronidexTrans2017[uniq_ind]
ElectronidexTrans2017_B2C <- ElectronidexTrans2017[-uniq_ind]
View(ElectronidexTrans2017_B2B)
View(ElectronidexTrans2017_B2C)
View(ElectronidexTrans2017)
knitr::opts_chunk$set(echo = TRUE, collapse = T, cache = T)
# Loading required libraries
pacman::p_load(tidyverse, caret, readr, VIM, rstudioapi, arules, arulesViz,
DEoptimR)
# Importing data
# Set working directory
# current_path = getActiveDocumentContext()$path
# setwd("C:/Users/edison/Documents/Ubiqum/Data Analytics Course/Module II/Task4/")
# Electronidex transactional data
ElectronidexTrans2017_df <- read.csv("C:/Users/edison/Documents/Ubiqum/Data Analytics Course/Module II/Task4/ElectronidexTransactions2017.csv",
header = F, sep = ",", strip.white = T)
ElectronidexTrans2017 <- read.transactions("C:/Users/edison/Documents/Ubiqum/Data Analytics Course/Module II/Task4/ElectronidexTransactions2017.csv",
header = F, sep = ",",
format = "basket",
rm.duplicates = T)
# Product Type key file
ProductType_key <- read.csv("C:/Users/edison/Documents/Ubiqum/Data Analytics Course/Module II/Task4/ProductType_csv.csv", header = T, sep = ";")
# Blackwell product data
existingprod <- read.csv("C:/Users/edison/Documents/Ubiqum/Data Analytics Course/Module II/Task4/Data_BW/existingproductattributes2017.csv")
newprod <- read.csv("C:/Users/edison/Documents/Ubiqum/Data Analytics Course/Module II/Task4/Data_BW/newprod_pred.csv", header = T)
# Preprocessing Blackwell product data
# Adding Profit monthly to existing products
existingprod$ProfitMonthly <- existingprod$Volume * existingprod$Price *
existingprod$ProfitMargin
# Merging existing with new products in one data frame
newprod$Volume <- NULL
colnames(newprod)[colnames(newprod) == "finalpredictedvolume"] <- "Volume"
blackwell_prod <- rbind(existingprod, newprod)
levels(blackwell_prod$ProductType)[2] <- "Monitor"
levels(blackwell_prod$ProductType)[7] <- "Desktop"
levels(blackwell_prod$ProductType)
# Exploring the transactions file
# summary(ElectronidexTrans2017)
#inspect(head(ElectronidexTrans2017,2))
# length(ElectronidexTrans2017)
# size(ElectronidexTrans2017)
# summary(size(ElectronidexTrans2017))
# str(size(ElectronidexTrans2017))
# head(LIST(ElectronidexTrans2017),5)
itemFrequencyPlot(ElectronidexTrans2017, topN = 10, type = "absolute")
str(ElectronidexTrans2017_df)
# Changing factors into char
ElectronidexTrans2017_df <- ElectronidexTrans2017_df %>%
mutate_if(is.factor, as.character)
# Adding up Electronidex data frame to calculate sales volume
elec_volume <- data.frame(table(unlist(ElectronidexTrans2017_df)))
elec_volume <- elec_volume[-1,]
rownames(elec_volume) <- NULL
colnames(elec_volume) <- c("product_name", "volume")
elec_volume <- elec_volume[order(elec_volume$product_name),]
# Merging product type to elec_volume
checking_vector <- c()
checking_vector
str(checking_vector)
str(elec_volume)
str(ProductType_key)
for (i in 1:125){
checking_vector[i] <- ProductType_key[i,1] == elec_volume[i,1]
}
Comparison_vector <- cbind(elec_volume$product_name,
ProductType_key$ProductName,
as.data.frame(checking_vector))
elec_volume$product_type <- ProductType_key$BlackWell
ggplot(elec_volume, aes(volume, fill = product_type)) +
geom_histogram(binwidth = 200, color ="white")
ggplot(elec_volume, aes(x=product_type, y=volume, fill = product_type)) +
geom_bar(stat = "identity") + ggtitle("Electronidex - sales volume per category")
# Setting category "Laptop and Netbook"
# levels(blackwell_prod$ProductType)[(levels(blackwell_prod$ProductType) ==
#                                     "Laptop")] <- "Laptop&Netbook"
# levels(blackwell_prod$ProductType)[(levels(blackwell_prod$ProductType) ==
#                                     "Netbook")] <- "Laptop&Netbook"
ggplot(blackwell_prod, aes(x = ProductType, y = Volume, fill = ProductType)) +
geom_bar(stat = "identity") +
ggtitle("BW's products (whole portfolio) - sales volume")
ggplot(blackwell_prod, aes(x = ProductType, y = ProfitMonthly, fill =
ProductType)) +
geom_bar(stat = "identity") +
ggtitle("BW's products (whole portfolio) - Profit")
ggplot(existingprod, aes(x = ProductType, y = ProfitMargin,
color = ProductType)) +  geom_boxplot()
ggplot(existingprod, aes(x = ProductType, y = Price,
color = ProductType)) +  geom_boxplot()
# Getting meadian for price and profit margin in BW's data
bw_price <- boxplot(existingprod$Price ~ existingprod$ProductType, plot = F)$stats[3,]
bw_profitmargin <- boxplot(existingprod$ProfitMargin ~ existingprod$ProductType, plot = F)$stats[3,]
bw_product_type <- cbind(levels(blackwell_prod$ProductType), bw_price, bw_profitmargin)
colnames(bw_product_type)[1] <- "product_type"
bw_product_type <- as.data.frame(bw_product_type)
# Creating a data frame to merge Elec?s data with estimated price and profit margin
elec_volume_profit <- merge(elec_volume, bw_product_type, by = "product_type")
elec_volume_profit$volume <- as.integer(elec_volume_profit$volume)
elec_volume_profit$bw_price <- as.numeric(elec_volume_profit$bw_price)
elec_volume_profit$bw_profitmargin <-
as.numeric(elec_volume_profit$bw_profitmargin)
elec_volume_profit$profit <- elec_volume_profit$volume *
elec_volume_profit$bw_price * elec_volume_profit$bw_profitmargin
ggplot(elec_volume_profit, aes(x = product_type, y = profit, fill = product_type)) +
geom_bar(stat = "identity") +
ggtitle("Elec's products (whole portfolio) - Profit")
dist_trans <- sort(size(ElectronidexTrans2017), decreasing = F )
dist_trans <- as.data.frame(dist_trans)
colnames(dist_trans) <- c("transaction_size")
ggplot(dist_trans, aes(x = transaction_size)) +
geom_histogram(binwidth = 1, color = "white") +
ggtitle("Distribution of the transaction's size at Elec")
ElectronidexTrans2017@itemInfo$ProductType <- ProductType_key$BlackWell
Desktop <- ElectronidexTrans2017@itemInfo[which(ProductType_key$BlackWell ==
"Desktop"), 1]
# Finding the indices of transactions with 3 or more desktops
ind <- c()
counter <- 0
for (i in 1:9){
for (j in (1:9)[-i]){
for (k in (1:9)[-c(i,j)]){
ind <- c(ind, which(ElectronidexTrans2017 %in% Desktop[i] &
ElectronidexTrans2017 %in% Desktop[j] &
ElectronidexTrans2017 %in% Desktop[k]))
counter <- counter + 1
}
}
}
# Finding the indices of transactions higher thatn 4 items
ind2 <- which(size(ElectronidexTrans2017) > 4)
# Consolidating the indices
ind3 <- c(ind, ind2)
uniq_ind <- unique(ind)
ElectronidexTrans2017_B2B <- ElectronidexTrans2017[uniq_ind]
ElectronidexTrans2017_B2C <- ElectronidexTrans2017[-uniq_ind]
ElectronidexTrans2017_pt <- arules::aggregate(ElectronidexTrans2017,
by = "ProductType")
association_rules_pt <- apriori(ElectronidexTrans2017_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
inspect(sort(association_rules, by = "lift"))
association_rules_b2c <- apriori(ElectronidexTrans2017_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
inspect(sort(association_rules, by = "lift"))
inspect(sort(association_rules_b2c, by = "lift"))
head(inspect(sort(association_rules_b2c, by = "lift")),5)
ElectronidexTrans2017_B2C_pt <- arules::aggregate(ElectronidexTrans2017_B2C,
by = "ProductType")
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2c, by = "lift")),5)
ElectronidexTrans2017_B2C_pt <- arules::aggregate(ElectronidexTrans2017_B2C,
by = "ProductType")
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2c, by = "lift")),5)
ElectronidexTrans2017_B2B_pt <- arules::aggregate(ElectronidexTrans2017_B2B,
by = "ProductType")
ElectronidexTrans2017_B2B_pt <- arules::aggregate(ElectronidexTrans2017_B2B,
by = "ProductType")
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2b, by = "lift")),5)
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.02, conf = 0.8,
minlen = 2))
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.01, conf = 0.8,
minlen = 2))
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.1, conf = 0.8,
minlen = 2))
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.5, conf = 0.8,
minlen = 2))
ElectronidexTrans2017_B2B_pt <- arules::aggregate(ElectronidexTrans2017_B2B,
by = "ProductType")
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.5, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2b, by = "lift")),5)
ElectronidexTrans2017_B2B_pt <- arules::aggregate(ElectronidexTrans2017_B2B,
by = "ProductType")
association_rules_b2b <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.1, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2b, by = "lift")),5)
ElectronidexTrans2017@itemInfo
ElectronidexTrans2017@itemInfo
ElectronidexTrans2017@itemInfo
view(ElectronidexTrans2017@itemInfo)
itemFrequency(ElectronidexTrans2017)
str(itemFrequency(ElectronidexTrans2017))
as.data.frame(itemFrequency(ElectronidexTrans2017))
view(as.data.frame(itemFrequency(ElectronidexTrans2017)))
itemfreq_df <- as.data.frame(itemFrequency(ElectronidexTrans2017))
itemfreq_df["iMac"]
itemfreq_df["iMac",1]
itemfreq_df <- as.data.frame(itemFrequency(ElectronidexTrans2017, type = "absolute"))
itemfreq_df["iMac",1]
head(ElectronidexTrans2017[size(ElectronidexTrans2017) > 4], 10)
head(inspect(ElectronidexTrans2017[size(ElectronidexTrans2017) > 4]), 10)
# Exploring the transactions file
summary(ElectronidexTrans2017)
summary(size(ElectronidexTrans2017))
summary(size(ElectronidexTrans2017))
inspect(ElectronidexTrans2017[size(ElectronidexTrans2017) > 5])
inspect(ElectronidexTrans2017[size(ElectronidexTrans2017) > 5])
inspect(ElectronidexTrans2017[size(ElectronidexTrans2017) > 5], topN = 10)
inspect(head(ElectronidexTrans2017[size(ElectronidexTrans2017) > 5], 10))
inspect(head(ElectronidexTrans2017[size(ElectronidexTrans2017) > 5], 5))
ind <- c()
counter <- 0
for (i in 1:9){
for (j in (1:9)[-i]){
for (k in (1:9)[-c(i,j)]){
ind <- c(ind, which(ElectronidexTrans2017 %in% Desktop[i] &
ElectronidexTrans2017 %in% Desktop[j] &
ElectronidexTrans2017 %in% Desktop[k]))
counter <- counter + 1
}
}
}
unique(ind)
str(unique(ind))
str(unique(ind2))
ind <- unique(ind)
# Finding the indices of transactions higher than 4 items
ind2 <- which(size(ElectronidexTrans2017) > 4)
ind2 <- unique(ind2)
str(unique(ind))
ind3 <- c(ind, ind2)
str(unique(ind2))
ind3 <- c(ind, ind2)
ind3 <- unique(ind3)
str(ind3)
ElectronidexTrans2017[ind]
Elec_d <- ElectronidexTrans2017[ind]
Elec_d[which(size(Elec_d) > 4)]
Desktop <- ElectronidexTrans2017@itemInfo[which(ProductType_key$BlackWell ==
"Desktop"), 1]
itemfreq_df <- as.data.frame(itemFrequency(ElectronidexTrans2017, type = "absolute"))
itemfreq_df["iMac",1]
inspect(head(ElectronidexTrans2017[size(ElectronidexTrans2017) > 5], 5))
# Finding the indices of transactions with 3 or more desktops (ind)
ind <- c()
counter <- 0
for (i in 1:9){
for (j in (1:9)[-i]){
for (k in (1:9)[-c(i,j)]){
ind <- c(ind, which(ElectronidexTrans2017 %in% Desktop[i] &
ElectronidexTrans2017 %in% Desktop[j] &
ElectronidexTrans2017 %in% Desktop[k]))
counter <- counter + 1
}
}
}
ind <- unique(ind)
# Finding the indices of transactions higher than 4 items (ind2)
ind2 <- which(size(ElectronidexTrans2017) > 4)
ind2 <- unique(ind2)
# Consolidating the indices (ind3)
str(unique(ind))
str(unique(ind2))
ind3 <- c(ind, ind2)
ind3 <- unique(ind3)
str(ind3)
Elec_d <- ElectronidexTrans2017[ind]
Elec_d[which(size(Elec_d) > 4)]
ElectronidexTrans2017_B2B <- ElectronidexTrans2017[uniq_ind]
ElectronidexTrans2017_B2C <- ElectronidexTrans2017[-uniq_ind]
# Finding the indices of transactions with 3 or more laptops (ind4)
Laptop <- ElectronidexTrans2017@itemInfo[which(ProductType_key$BlackWell ==
"Laptop"), 1]
Laptop
ind4 <- c()
counter <- 0
ind4 <- c()
counter <- 0
for (i in 1:10){
for (j in (1:10)[-i]){
for (k in (1:10)[-c(i,j)]){
ind4 <- c(ind4, which(ElectronidexTrans2017 %in% Laptop[i] &
ElectronidexTrans2017 %in% Laptop[j] &
ElectronidexTrans2017 %in% Laptop[k]))
counter <- counter + 1
}
}
}
counter
ind4 <- unique(ind4)
ind4
str(ind4)
ind3 <- c(ind, ind2, ind4)
ind3 <- unique(ind3)
str(ind3)
ind_t <- c(ind, ind2, ind4)
ind_t <- unique(ind_t)
ElectronidexTrans2017_B2B <- ElectronidexTrans2017[ind_t]
ElectronidexTrans2017_B2C <- ElectronidexTrans2017[-ind_t]
inspect(head(ElectronidexTrans2017_B2B[size(ElectronidexTrans2017) < 5], 5))
inspect(head(ElectronidexTrans2017_B2B[size(ElectronidexTrans2017_B2B) < 5], 5))
inspect(head(ElectronidexTrans2017_B2C[size(ElectronidexTrans2017_B2C) < 5], 5))
View(ElectronidexTrans2017_B2B)
ElectronidexTrans2017_B2C_pt <- arules::aggregate(ElectronidexTrans2017_B2C,
by = "ProductType")
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
ElectronidexTrans2017_B2B
ElectronidexTrans2017_B2C
association_rules <- apriori(ElectronidexTrans2017,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules <- apriori(ElectronidexTrans2017,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c <- apriori(ElectronidexTrans2017_B2C,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.005, conf = 0.4,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.005, conf = 0.7,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.005, conf = 0.7,
minlen = 2))
association_rules <- apriori(ElectronidexTrans2017,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
ElectronidexTrans2017_pt <- arules::aggregate(ElectronidexTrans2017,
by = "ProductType")
association_rules_pt <- apriori(ElectronidexTrans2017_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
association_rules_b2c_pt <- apriori(ElectronidexTrans2017_B2C_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
association_rules_pt <- apriori(ElectronidexTrans2017_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2c, by = "lift")),5)
association_rules_pt <- apriori(ElectronidexTrans2017_pt,
parameter = list(supp = 0.005, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2c_pt, by = "lift")),5)
head(inspect(sort(association_rules_b2c_pt, by = "lift")),5)
association_rules_pt <- apriori(ElectronidexTrans2017_pt,
parameter = list(supp = 0.0005, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2c_pt, by = "lift")),5)
association_rules_pt <- apriori(ElectronidexTrans2017_pt,
parameter = list(supp = 0.0001, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2c_pt, by = "lift")),5)
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.05, conf = 0.8,
minlen = 2))
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.5, conf = 0.8,
minlen = 2))
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.8, conf = 0.8,
minlen = 2))
#head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
ElectronidexTrans2017_B2B_pt <- arules::aggregate(ElectronidexTrans2017_B2B,
by = "ProductType")
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.8, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.7, conf = 0.8,
minlen = 2))
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.6, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.6, conf = 0.8,
minlen = 3))
head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.2, conf = 0.8,
minlen = 3))
head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.6, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
association_rules_b2b_pt <- apriori(ElectronidexTrans2017_B2B_pt,
parameter = list(supp = 0.6, conf = 0.8,
minlen = 2))
head(inspect(sort(association_rules_b2b_pt, by = "lift")),5)
